const { generateFinancialReport } = require("../services/reportService");
const {
  exportRevenues,
  exportExpenses,
  importRevenues,
  importExpenses,
} = require("../services/excelService");
const logger = require("../utils/logger");

// Generate financial report
exports.generateFinancialReport = async (request, reply) => {
  try {
    let { startDate, endDate, format = "json" } = request.query; // Change const to let

    // Set default dates if not provided
    if (!startDate) {
      startDate = new Date(new Date().getFullYear(), 0, 1); // Start of current year
    }
    if (!endDate) {
      endDate = new Date(); // Current date
    }

    // Convert to Date objects if they're strings
    if (typeof startDate === "string") {
      startDate = new Date(startDate);
    }
    if (typeof endDate === "string") {
      endDate = new Date(endDate);
    }

    const reportData = await generateFinancialReport(
      { startDate, endDate },
      format
    );

    logger.info(`Financial report generated by user ${request.user.id}`, {
      action: "generateFinancialReport",
      userId: request.user.id,
      format: format,
    });

    if (format === "pdf") {
      reply
        .header("Content-Type", "application/pdf")
        .header(
          "Content-Disposition",
          "attachment; filename=financial-report.pdf"
        )
        .send(reportData);
    } else if (format === "excel") {
      reply
        .header(
          "Content-Type",
          "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
        .header(
          "Content-Disposition",
          "attachment; filename=financial-report.xlsx"
        )
        .send(reportData);
    } else {
      reply.send({
        success: true,
        data: reportData,
      });
    }
  } catch (error) {
    logger.error(`Generate financial report error: ${error.message}`);
    reply.code(500).send({ success: false, message: error.message });
  }
};

// Export revenues to Excel
exports.exportRevenues = async (request, reply) => {
  try {
    let { startDate, endDate } = request.query; // Change const to let

    // Add default date handling for export functions too
    if (!startDate) {
      startDate = new Date(new Date().getFullYear(), 0, 1);
    }
    if (!endDate) {
      endDate = new Date();
    }

    // Convert to Date objects if they're strings
    if (typeof startDate === "string") {
      startDate = new Date(startDate);
    }
    if (typeof endDate === "string") {
      endDate = new Date(endDate);
    }

    const buffer = await exportRevenues({ startDate, endDate });

    logger.info(`Revenues exported by user ${request.user.id}`, {
      action: "exportRevenues",
      userId: request.user.id,
    });

    reply
      .header(
        "Content-Type",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
      )
      .header("Content-Disposition", "attachment; filename=revenues.xlsx")
      .send(buffer);
  } catch (error) {
    logger.error(`Export revenues error: ${error.message}`);
    reply.code(500).send({ success: false, message: error.message });
  }
};

// Export expenses to Excel
exports.exportExpenses = async (request, reply) => {
  try {
    let { startDate, endDate } = request.query; // Change const to let

    // Add default date handling for export functions too
    if (!startDate) {
      startDate = new Date(new Date().getFullYear(), 0, 1);
    }
    if (!endDate) {
      endDate = new Date();
    }

    // Convert to Date objects if they're strings
    if (typeof startDate === "string") {
      startDate = new Date(startDate);
    }
    if (typeof endDate === "string") {
      endDate = new Date(endDate);
    }

    const buffer = await exportExpenses({ startDate, endDate });

    logger.info(`Expenses exported by user ${request.user.id}`, {
      action: "exportExpenses",
      userId: request.user.id,
    });

    reply
      .header(
        "Content-Type",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
      )
      .header("Content-Disposition", "attachment; filename=expenses.xlsx")
      .send(buffer);
  } catch (error) {
    logger.error(`Export expenses error: ${error.message}`);
    reply.code(500).send({ success: false, message: error.message });
  }
};

// Import revenues from Excel
exports.importRevenues = async (request, reply) => {
  try {
    const data = await request.file();
    const buffer = await data.toBuffer();

    const result = await importRevenues(buffer, request.user.id);

    if (result.errors.length > 0) {
      logger.warn(`Revenues imported with errors by user ${request.user.id}`, {
        action: "importRevenues",
        userId: request.user.id,
        importedCount: result.importedCount,
        errorCount: result.errors.length,
      });

      reply.send({
        success: false,
        message: "Some revenues were not imported due to errors",
        importedCount: result.importedCount,
        errors: result.errors,
      });
    } else {
      logger.info(`Revenues imported successfully by user ${request.user.id}`, {
        action: "importRevenues",
        userId: request.user.id,
        importedCount: result.importedCount,
      });

      reply.send({
        success: true,
        message: "Revenues imported successfully",
        importedCount: result.importedCount,
      });
    }
  } catch (error) {
    logger.error(`Import revenues error: ${error.message}`);
    reply.code(500).send({ success: false, message: error.message });
  }
};

// Import expenses from Excel
exports.importExpenses = async (request, reply) => {
  try {
    const data = await request.file();
    const buffer = await data.toBuffer();

    const result = await importExpenses(buffer, request.user.id);

    if (result.errors.length > 0) {
      logger.warn(`Expenses imported with errors by user ${request.user.id}`, {
        action: "importExpenses",
        userId: request.user.id,
        importedCount: result.importedCount,
        errorCount: result.errors.length,
      });

      reply.send({
        success: false,
        message: "Some expenses were not imported due to errors",
        importedCount: result.importedCount,
        errors: result.errors,
      });
    } else {
      logger.info(`Expenses imported successfully by user ${request.user.id}`, {
        action: "importExpenses",
        userId: request.user.id,
        importedCount: result.importedCount,
      });

      reply.send({
        success: true,
        message: "Expenses imported successfully",
        importedCount: result.importedCount,
      });
    }
  } catch (error) {
    logger.error(`Import expenses error: ${error.message}`);
    reply.code(500).send({ success: false, message: error.message });
  }
};
